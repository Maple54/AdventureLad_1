#     self.direction = pygame.math.Vector2(0, 0)
#     self.speed = 8
#     self.gravity = 0.8
#     self.jump_speed = -16

#     self.status = 'idle'
#     self.position = {'ground': False, 'ceiling': False, 'left': False, 'right': False}

# def load_assets(self):
#     def import_folder(path):
#         return [pygame.image.load(path.join(path, file)).convert_alpha() for file in path.listdir()]

#     character_path = 'graphics/player'
#     self.animations = {'idle': import_folder(character_path + '/idle'),
#                         'run': import_folder(character_path + '/run'),
#                         'jump': import_folder(character_path + '/jump'),
#                         'fall': import_folder(character_path + '/fall')}

# def animate(self):
#     animation = self.animations[self.status]
#     self.frame_index += self.animation_speed
#     if self.frame_index >= len(animation):
#         self.frame_index = 0
#     image = animation[int(self.frame_index) % len(animation)]
#     if not self.position['left']:
#         self.image = image
#     else:
#         self.image = pygame.transform.flip(image, True, False)

#     if self.position['ground'] and self.position['right']:
#         self.rect.bottomright = self.position['right']
#     elif self.position['ground'] and self.position['left']:
#         self.rect.bottomleft = self.position['left']
#     elif self.position['ground']:
#         self.rect.midbottom = self.position['ground']
#     elif self.position['ceiling'] and self.position['right']:
#         self.rect.topright = self.position['right']
#     elif self.position['ceiling'] and self.position['left']:
#         self.rect.topleft = self.position['left']
#     elif self.position['ceiling']:
#         self.rect.midtop = self.position['ceiling']

# def get_input(self):
#     keys = pygame.key.get_pressed()

#     if keys[pygame.K_RIGHT]:
#         self.direction.x = 1
#         self.position['right'] = False
#     elif keys[pygame.K_LEFT]:
#         self.direction.x = -1
#         self.position['left'] = False
#     else:
#         self.direction.x = 0

#     if keys[pygame.K_SPACE] and self.position['ground']:
#         self.jump()

# def get_status(self):
#     if self.direction.y < 0:
#         self.status = 'jump'
#     elif self.direction.y > 1:
#         self.status = 'fall'
#     else:
#         if self.direction.x != 0:
#             self.status = 'run'
#         else:
#             self.status = 'idle'

# def apply_gravity(self):
#     self.direction.y += self.gravity
#     self.position['ground'] = False
#     self.position['ceiling'] = False
#     self.position['left'] = False
#     self.position['right'] = False
#     self.position['ground'], self.direction.y = self.check_collision((0, self.direction.y))
#     self.position['ceiling'], self.direction.y = self.check_collision((0, -self.direction.y))
#     self.position['left'], self.direction.x = self.check_collision((-self.speed, 0))
#     self.position['right'], self.direction.x = self.check_collision((self.speed, 0))
#     self.rect.x += self.direction.x * self.speed
#     self.rect.y += self.direction.y

# def check_collision(self, offset):
#     rect = self.rect.copy()
#     rect.x += offset[0]
#     rect.y += offset[1]
#     for tile in self.tiles:
#         if rect.colliderect(tile.rect):
#             if offset[0] > 0:
#                 self.position['right'] = tile.rect.left
#             elif offset[0] < 0:
#                 self.position['left'] = tile.rect.right
#             elif offset[1] > 0:
#                 self.position['ground'] = tile.rect.top
#             elif offset[1] < 0:
#                 self.position['ceiling'] =